% Written by Natalia Molinero Mingoranceclcclose allclear allclearAllMemoizedCachesisCompound=0; % if 1-> use two reference frames; we use only 1refList=1; % index to take reference frame from the list of ref frames%YUV 4:2:0:subsampling_x=1;subsampling_y=1;%taking luma blocks for 3 references and current frameref_frame = double(imread('1.jpg'));ref_frame = ref_frame(1:256, 1:256, :); %%to do: check how to do it with complete frameR = ref_frame(:,:,1); G = ref_frame(:,:,2); B = ref_frame(:,:,3);refFrame=0.288*R+0.587*G+0.114*B;ref_frame=refFrame;target_frame = double(imread('2.jpg'));target_frame = target_frame(1:256, 1:256, :); %%to do: check how to do it with complete frameR = target_frame(:,:,1); G = target_frame(:,:,2); B = target_frame(:,:,3);Y=0.288*R+0.587*G+0.114*B;%%get the target frame block of 32x32:r = size(Y, 1); c = size(Y, 2);    bs=32; % Block Size (32x32)    for i=1:(r/bs)      for j=1:(c/bs)           %%%PBs                    PBY=Y((i-1)*32+[1:32],(j-1)*32+[1:32]);               end    end target_frame=PBY;    block=0;ref2= double(imread('3.jpg'));ref2 = ref2(1:256, 1:256, :);R = ref2(:,:,1); G = ref2(:,:,2); B = ref2(:,:,3);ref2=0.288*R+0.587*G+0.114*B;ref3= double(imread('4.jpg'));ref3 = ref3(1:256, 1:256, :);R = ref3(:,:,1); G = ref3(:,:,2); B = ref3(:,:,3);ref3=0.288*R+0.587*G+0.114*B;RefFrames = {refFrame,ref2,ref3};UsePrevFrameMvs=0;% set equal to 1 if all of the following conditions are true:% a. This is not the first time compute_image_size is invoked.% b. Both FrameWidth and FrameHeight have the same value compared to the previous time this function % was invoked.% c. show_frame was equal to 1 the previous time this function was invoked.% d. error_resilient_mode is equal to 0.% e. FrameIsIntra is equal to 0.% Otherwise, UsePrevFrameMvs is set equal to 0% we can assume this is the first time the image size is computed%sizes and positions of blocks:MiSize = 9; %BLOCK_32X32, this is the subsize valuew=32;h=32;MiRow=1; %vertical location of the block in units of 8x8 pixelsMiCol=1;%horizontal location of the block in units of 8x8 pixels[row, col] = size(refFrame);MiCols=bitsll(col+7,3);% horizontal location of the block in units of 8x8 pixelsMiRows=bitsll(row+7,3);intermode=[0,1,2,3];% ["NEARESTMV","NEARMV","ZEROMV","NEWMV"];y_mode=[10,11,12,13];% ["NEARESTMV","NEARMV","ZEROMV","NEWMV"];interp_filter=0; %EIGHTTAPinterpolation_filter=1;%EIGHTTAP_SMOOTHallow_high_precision_mv=0; %1/4 pelliteral_to_type = [ "EIGHTTAP_SMOOTH", "EIGHTTAP", "EIGHTTAP_SHARP", "BILINEAR" ];%initialize vectors:Mv=cell(1,1);Mvs=cell(1,8);CandidateMv=cell(1,8);CandidateFrame=cell(1,8);PrevMvs="";ZeroMv={0,0};COMPANDED_MVREF_THRESH =8;%Threshold at	which motion vectors are considered	largeMAX_MV_REF_CANDIDATES=2; %Number of	motion vectors returned	by find_mv_refs	processMVREF_NEIGHBOURS = 8; %Number of positions to search in	motion vector predictionmode_2_counter=[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 3, 1]; %counter to get row and colum of candidate from y_modesmv_ref_blocks= { {{-1, 0}, {0, -1}, {-1, -1}, {-2, 0}, {0, -2}, {-2, -1}, {-1, -2}, {-2, -2}}; {{-1, 0}, {0, -1}, {-1, -1}, {-2, 0}, {0, -2}, {-2, -1}, {-1, -2}, {-2, -2}}; {{-1, 0}, {0, -1}, {-1, -1}, {-2, 0}, {0, -2}, {-2, -1}, {-1, -2}, {-2, -2}}; {{-1, 0}, {0, -1}, {-1, -1}, {-2, 0}, {0, -2}, {-2, -1}, {-1, -2}, {-2, -2}}; {{0, -1}, {-1, 0}, {1, -1}, {-1, -1}, {0, -2}, {-2, 0}, {-2, -1}, {-1, -2}}; {{-1, 0}, {0, -1}, {-1, 1}, {-1, -1}, {-2, 0}, {0, -2}, {-1, -2}, {-2, -1}}; {{-1, 0}, {0, -1}, {-1, 1}, {1, -1}, {-1, -1}, {-3, 0}, {0, -3}, {-3, -3}}; {{0, -1}, {-1, 0}, {2, -1}, {-1, -1}, {-1, 1}, {0, -3}, {-3, 0}, {-3, -3}}; {{-1, 0}, {0, -1}, {-1, 2}, {-1, -1}, {1, -1}, {-3, 0}, {0, -3}, {-3, -3}}; {{-1, 1}, {1, -1}, {-1, 2}, {2, -1}, {-1, -1}, {-3, 0}, {0, -3}, {-3, -3}}; {{0, -1}, {-1, 0}, {4, -1}, {-1, 2}, {-1, -1}, {0, -3}, {-3, 0}, {2, -1}}; {{-1, 0}, {0, -1}, {-1, 4}, {2, -1}, {-1, -1}, {-3, 0}, {0, -3}, {-1, 2}}; {{-1, 3}, {3, -1}, {-1, 4}, {4, -1}, {-1, -1}, {-1, 0}, {0, -1}, {-1, 6}}}; %candidate locations to search for motion vectorscounter_to_context = {2,3,4,1,3,9,0,9,9,5,5,9,5,9,9,9,9,9,6}; %equivalent to BOTH_PREDICTED, %  NEW_PLUS_NON_INTRA, %  BOTH_NEW, %  ZERO_PLUS_PREDICTED, %  NEW_PLUS_NON_INTRA, %  INVALID_CASE, %  BOTH_ZERO, %  INVALID_CASE, %  INVALID_CASE, %  INTRA_PLUS_NON_INTRA, %  INTRA_PLUS_NON_INTRA, %  INVALID_CASE, %  INTRA_PLUS_NON_INTRA, %  INVALID_CASE, %  INVALID_CASE, %  INVALID_CASE, %  INVALID_CASE, %  INVALID_CASE, %  BOTH_INTRAnum_8x8_blocks_high_lookup = {1, 1, 1, 1, 2, 1, 2, 4, 2, 4, 8, 4, 8}; %block high look up tablesubpel_filters={ { { 0, 0, 0, 128, 0, 0, 0, 0}; { 0, 1, -5, 126, 8, -3, 1, 0}; { -1, 3, -10, 122, 18, -6, 2, 0}; { -1, 4, -13, 118, 27, -9, 3, -1};{ -1, 4, -16, 112, 37, -11, 4, -1}; { -1, 5, -18, 105, 48, -14, 4, -1}; { -1, 5, -19, 97, 58, -16, 5, -1}; { -1, 6, -19, 88, 68, -18, 5, -1}; { -1, 6, -19, 78, 78, -19, 6, -1}; { -1, 5, -18, 68, 88, -19, 6, -1}; { -1, 5, -16, 58, 97, -19, 5, -1}; { -1, 4, -14, 48, 105, -18, 5, -1}; { -1, 4, -11, 37, 112, -16, 4, -1}; { -1, 3, -9, 27, 118, -13, 4, -1}; { 0, 2, -6, 18, 122, -10, 3, -1}; { 0, 1, -3, 8, 126, -5, 1, 0} }; { { 0, 0, 0, 128, 0, 0, 0, 0}; {-3, -1, 32, 64, 38, 1, -3, 0}; {-2, -2, 29, 63, 41, 2, -3, 0}; {-2, -2, 26, 63, 43, 4, -4, 0}; {-2, -3, 24, 62, 46, 5, -4, 0}; {-2, -3, 21, 60, 49, 7, -4, 0}; {-1, -4, 18, 59, 51, 9, -4, 0}; {-1, -4, 16, 57, 53, 12, -4, -1}; {-1, -4, 14, 55, 55, 14, -4, -1}; {-1, -4, 12, 53, 57, 16, -4, -1}; { 0, -4, 9, 51, 59, 18, -4, -1}; { 0, -4, 7, 49, 60, 21, -3, -2}; { 0, -4, 5, 46, 62, 24, -3, -2}; { 0, -4, 4, 43, 63, 26, -2, -2}; { 0, -3, 2, 41, 63, 29, -2, -2}; { 0, -3, 1, 38, 64, 32, -1, -3} }; { {0, 0, 0, 128, 0, 0, 0, 0}; {-1, 3, -7, 127, 8, -3, 1, 0}; {-2, 5, -13, 125, 17, -6, 3, -1}; {-3, 7, -17, 121, 27, -10, 5, -2}; {-4, 9, -20, 115, 37, -13, 6, -2}; {-4, 10, -23, 108, 48, -16, 8, -3}; {-4, 10, -24, 100, 59, -19, 9, -3}; {-4, 11, -24, 90, 70, -21, 10, -4}; {-4, 11, -23, 80, 80, -23, 11, -4}; {-4, 10, -21, 70, 90, -24, 11, -4}; {-3, 9, -19, 59, 100, -24, 10, -4}; {-3, 8, -16, 48, 108, -23, 10, -4}; {-2, 6, -13, 37, 115, -20, 9, -4}; {-2, 5, -10, 27, 121, -17, 7, -3}; {-1, 3, -6, 17, 125, -13, 5, -2}; {0, 1, -3, 8, 127, -7, 3, -1} }; { { 0, 0, 0, 128, 0, 0, 0, 0 }; { 0, 0, 0, 120, 8, 0, 0, 0 }; { 0, 0, 0, 112, 16, 0, 0, 0 }; { 0, 0, 0, 104, 24, 0, 0, 0 }; { 0, 0, 0, 96, 32, 0, 0, 0 }; { 0, 0, 0, 88, 40, 0, 0, 0 }; { 0, 0, 0, 80, 48, 0, 0, 0 }; { 0, 0, 0, 72, 56, 0, 0, 0 }; { 0, 0, 0, 64, 64, 0, 0, 0 }; { 0, 0, 0, 56, 72, 0, 0, 0 }; { 0, 0, 0, 48, 80, 0, 0, 0 }; { 0, 0, 0, 40, 88, 0, 0, 0 }; { 0, 0, 0, 32, 96, 0, 0, 0 }; { 0, 0, 0, 24, 104, 0, 0, 0 }; { 0, 0, 0, 16, 112, 0, 0, 0 }; { 0, 0, 0, 8, 120, 0, 0, 0 } }};memUsedsave variables.mat